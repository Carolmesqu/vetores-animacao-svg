------------------------ // ------------------------

Solange está criando seus primeiros vetores em SVG 
e abriu o código no navegador. O resultado foi o 
seguinte:

Que código foi utilizado para obter esse resultado?

<svg width="200" height="200">
 <circle cx="0" cy="0" r="40" fill="red" />
</svg>

O SVG sempre considera o centro do objeto gráfico 
<circle> ao renderizar a forma. Ao declararmos 
cx="0" cy="0" estamos dizendo ao SVG que crie 
o círculo levando em conta essas coordenadas, ou 
seja, o ponto mais superior/esquerdo do objeto.

Como criamos um <svg width="200" height="200">, 
para que o círculo ocupe todo o espaço declarado 
para o SVG (200x200) temos que posicioná-lo 
considerando o centro do círculo. Dessa forma, 
as coordenadas seriam cx="100" cy="100" para que 
o centro do círculo coincida com o centro do SVG.

Pratique com vários valores de raio para ver o 
resultado!

------------------------ // ------------------------

Durante a aula, vimos que o elemento gráfico 
<path> aceita várias letras como parte das 
instruções para traçarmos as retas e curvas:

   M = move até
   L = linha até
   H = linha horizontal até
   V = linha vertical até
   C = curva até
   S = curva suave até
   Q = curva de Bézier
   T = curva de Bézier suave
   A = arco elíptico
   Z = fecha path

Várias (embora não todas) vêm em pares, MAIÚSCULA
 e minúscula. A versão maiúscula se refere a 
 coordenadas absolutas e a versão minúscula a 
 coordenadas relativas. Por exemplo:

M 100,100 significa "Pegue uma caneta e a 
posicione nas coordenadas exatas 100,100" m 100,100 
significa "Pegue uma caneta e a posicione 100 para 
baixo e 100 para a direita a partir da posição em 
que a sua caneta se encontra agora." Se aplicarmos 
isso a um exemplo em código:

Vejamos agora a diferença entre inserir uma nova 
reta usando L (maiúsculo) e l (minúsculo):

Ou seja, quando utilizamos L o svg procura a 
coordenada absoluta dentro da "janela de 
visualização" do elemento. Quando utilizamos 
l o svg vai partir 
da posição atual da "caneta" (como se 
estivéssemos traçando com uma caneta, do 
ponto A ao ponto B) para então mover-se 
25 à direita e fazer o traçado.

Este exemplo no codepen utiliza esse recurso de 
maiúsculas/minúsculas para criar um desenho 
utilizando poucas instruções de <path>.

------------------------ // ------------------------

Você deve ter percebido que alguns códigos em 
<svg>, especialmente os que geramos através de 
conversores/exportadores como o Illustrator, 
apresentam informações como estas:

<svg xmlns="http://www.w3.org/2000/svg">
    <!-- elementos gráficos -->
</svg>

Mas o que significa o atributo xmlns 
(XML NameSpace)?

Vamos lembrar que o SVG é uma linguagem de 
marcação, da família XML (Extensible Markup 
Language, ou Linguagem de Marcação Extensível). 
O XML é uma "metalinguagem" que permite ao 
usuário a criação de suas próprias linguagens de 
marcação, baseadas nesse modelo. Ou seja, é 
permitida a criação de outros elementos (ou tags) 
além das já definidas, por exemplo, no HTML.

Uma vez que é possível criar tags, é possível 
que existam duas tags com o mesmo nome, criadas 
em ocasiões diferentes e com usos diferentes? 
Sim, e os namespaces existem para evitar 
confusões. Durante o curso pode parecer estranho 
que isso aconteça, mas vamos lembrar que o XML 
também é utilizado em estruturas de dados, 
como neste exemplo:

<info>
 <nome>Aline A</nome>
 <empresa>Code Dev</empresa>
 <celular>11-99999-9999</celular>
 <email>marcia@email.com</email>
</info>
<info>
 <nome>Ariadne B</nome>
 <empresa>Code Dev</empresa>
 <celular>11-99999-8888</celular>
 <email>julia@email.com</email>
</info>

Então, diferentes tipos de conteúdo XML (ou 
baseados em XML) podem estar presentes em um 
mesmo documento, e como o usuário pode definir 
suas tags, como no exemplo acima, o namespace 
define a qual marcação pertence tal tag. O 
formato http://www.w3.org/2000/svg é um padrão 
da W3 para o namespace e não precisa ser 
"linkável", apenas é uma informação que garante 
que todas as tags que estão aninhadas dentro do 
elemento-pai (<svg>) são, com certeza, elementos 
do tipo SVG e devem ser renderizadas/interpretadas 
de acordo.

No nosso caso, não precisamos nos preocupar muito 
(já vimos que em um exemplo simples o SVG não 
deixará de funcionar sem o namespace), apenas 
podemos deixar o atributo declarado em nosso 
código.

Para saber mais sobre namespaces e sua importância, 
você pode visitar este artigo no MDN (em português).

------------------------ // ------------------------

Quando usamos o Illustrator para exportar SVG, 
temos as seguintes alternativas:

(na versão em português: CSS interno, Estilo 
incorporado ou Atributos de apresentação)

Você pode escolher a que quiser para trabalhar, 
baseando-se na seguintes diferenças:

CSS interno: as propriedades de CSS geradas 
automaticamente na conversão pelo Illustrator 
vão aparecer no código dentro da tag <style>, 
como vimos em nosso arquivo da praia.

<defs>
  <style>
    .cls-1{fill:#6dbd45;}
    .cls-2{fill:#fff;}
    .cls-3{fill:#f68e49;}
  </style>
</defs>

Estilo incorporado: as propriedades de CSS são 
incorporadas dentro de cada tag, usando o 
atributo style="propriedade: valor" (veja como 
exemplo a propriedade fill).

<path d="M265,170.35S367.54,7.18,499,137.48C499,
137.48,345.63,117.92,265,170.35Z" style="fill:
#6dbd45"/>

Atributos de apresentação: Parecido com o estilo 
incorporado, porém aqui cada propriedade de CSS é 
adicionada como um atributo de HTML (por exemplo, 
a propriedade fill, diferente do exemplo anterior 
onde estava declarada com o atributo style, agora 
é ela mesma um atributo):

<path d="M265,170.35S367.54,7.18,499,137.48C499
,137.48,345.63,117.92,265,170.35Z" fill=
"#6dbd45"/>

No modo "atributos de apresentação" é bem mais 
fácil alterarmos e adicionarmos as propriedades 
de CSS do SVG, uma vez que estamos usando a tag 
<style>, enquanto no "estilo incorporado" as 
propriedades são mais difíceis de localizar no 
código, pois estão espalhadas pelas tags.

É possível adicionar uma tag <style> para 
alterar o estilo original, porém só conseguimos 
realmente sobrescrever os valores usando 
!important, o que nem sempre é uma boa prática. 
Por exemplo, para alterar o código do exemplo 
acima:

<style>
  #exemplo {
    fill: #fff !important
  }
<style>

<path id="exemplo" d="M265,170.35S367.54,7.18,
499,137.48C499,137.48,345.63,117.92,265,170.35Z"
 fill="#6dbd45"/>

O Illustrator tem outras ferramentas para a 
criação de SVGs, você pode consultar a 
documentação que está completa em português.

------------------------ // ------------------------

O que é SVG;
Métodos para criarmos SVGs;
Formas básicas (elementos gráficos) que compõe os 
vetores SVG;
Como inserir SVGs em nosso markup;
Métodos para trabalhar com SVG: inserindo direto 
no HTML ou importando como arquivo externo, e as 
vantagens e desvantagens de cada um.

------------------------ // ------------------------



------------------------ // ------------------------